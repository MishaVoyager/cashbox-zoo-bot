# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    image: vecheren/cashbox_zoo
    build: .
    ports:
      - 8080:8080
    environment:
      ZOO_WEBHOOK_PATH: https://cashbox-zoo-bot.onrender.com
      USE_POLLING: true
      ZOO_HOST: 0.0.0.0
      ZOO_PORT: 8080
      SECRETS_ADDRESS: /run/secrets
      SECRETS_IN_FILE: true
    secrets:
      - pg_pass
      - pg_user
      - pg_db_name
      - token
      - webhook_secret
    depends_on:
      - postgres
  postgres:
    image: postgres:13.3
    environment:
      POSTGRES_DB_FILE: /run/secrets/pg_db_name
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_pass
      POSTGRES_USER_FILE: /run/secrets/pg_user
    volumes:
      - zoo-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    secrets:
      - pg_pass
      - pg_user
      - pg_db_name
volumes:
  zoo-data:
secrets:
  webhook_secret:
    file: secrets/webhook_secret.txt
  pg_pass:
    file: secrets/pg_pass.txt
  pg_user:
    file: secrets/pg_user.txt
  pg_db_name: 
    file: secrets/pg_db_name.txt
  token:
    file: secrets/token.txt
    
  
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

